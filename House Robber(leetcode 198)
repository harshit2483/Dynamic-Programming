# Exhaustive Search (iterative) - O(n * 2^n) time

class Solution1(object): 
    
    def rob(self, nums):
        def value(subset,nums):
            val=0
            for i in (subset):
                val+=nums[i]
            return val
        def valid(comb):
                for i in range(1,len(comb)):
                    if comb[i]-comb[i-1]==1:
                        return False
                return True
    
        def searching(nums,i,n,subset,comb):
                if i==n:
                    comb.append(subset)
                else:
                    searching(nums,i+1,n,subset[:],comb)
                    subset.append(i)
                    searching(nums,i+1,n,subset[:],comb)
                    subset.pop()  
        i=0
        n=len(nums)
        comb=[]
        subset=[]
        searching(nums,i,n,subset[:],comb)
        m=0
        
        for subsets in comb:
            if(valid(subsets)):
                m=max(m,value(subsets,nums))
    
        return m
